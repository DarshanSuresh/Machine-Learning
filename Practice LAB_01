{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMV0PiONgmgC9pXzM4Wn4ec",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DarshanSuresh/Machine-Learning/blob/main/ML_LAB_01_26_July_2024.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import classification_report"
      ],
      "metadata": {
        "id": "GcMFwZJ-_tsa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "Px1QKuW6_Kow",
        "outputId": "5c752b08-2d70-4098-9070-70df8e703ab3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       satisfactoryLevel  lastEvaluation  numberOfProjects  avgMonthlyHours  \\\n",
              "0                   0.38            0.53                 2              157   \n",
              "1                   0.80            0.86                 5              262   \n",
              "2                   0.11            0.88                 7              272   \n",
              "3                   0.37            0.52                 2              159   \n",
              "4                   0.41            0.50                 2              153   \n",
              "...                  ...             ...               ...              ...   \n",
              "14994               0.11            0.85                 7              275   \n",
              "14995               0.99            0.83                 4              274   \n",
              "14996               0.72            0.72                 4              175   \n",
              "14997               0.24            0.91                 5              177   \n",
              "14998               0.77            0.83                 6              271   \n",
              "\n",
              "       timeSpent.company  workAccident  left  promotionInLast5years  \\\n",
              "0                      3             0     1                      0   \n",
              "1                      6             0     1                      0   \n",
              "2                      4             0     1                      0   \n",
              "3                      3             0     1                      0   \n",
              "4                      3             0     1                      0   \n",
              "...                  ...           ...   ...                    ...   \n",
              "14994                  4             0     1                      0   \n",
              "14995                  2             0     0                      0   \n",
              "14996                  4             0     0                      0   \n",
              "14997                  5             0     0                      0   \n",
              "14998                  3             0     0                      0   \n",
              "\n",
              "            dept  salary  \n",
              "0          sales     low  \n",
              "1          sales  medium  \n",
              "2          sales  medium  \n",
              "3          sales     low  \n",
              "4          sales     low  \n",
              "...          ...     ...  \n",
              "14994    support  medium  \n",
              "14995      sales     low  \n",
              "14996  technical     low  \n",
              "14997      sales     low  \n",
              "14998    support     low  \n",
              "\n",
              "[14999 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bb2925ef-788a-406a-aec7-a0001f552ac1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>satisfactoryLevel</th>\n",
              "      <th>lastEvaluation</th>\n",
              "      <th>numberOfProjects</th>\n",
              "      <th>avgMonthlyHours</th>\n",
              "      <th>timeSpent.company</th>\n",
              "      <th>workAccident</th>\n",
              "      <th>left</th>\n",
              "      <th>promotionInLast5years</th>\n",
              "      <th>dept</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.38</td>\n",
              "      <td>0.53</td>\n",
              "      <td>2</td>\n",
              "      <td>157</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.80</td>\n",
              "      <td>0.86</td>\n",
              "      <td>5</td>\n",
              "      <td>262</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.11</td>\n",
              "      <td>0.88</td>\n",
              "      <td>7</td>\n",
              "      <td>272</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.37</td>\n",
              "      <td>0.52</td>\n",
              "      <td>2</td>\n",
              "      <td>159</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.41</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2</td>\n",
              "      <td>153</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14994</th>\n",
              "      <td>0.11</td>\n",
              "      <td>0.85</td>\n",
              "      <td>7</td>\n",
              "      <td>275</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>support</td>\n",
              "      <td>medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14995</th>\n",
              "      <td>0.99</td>\n",
              "      <td>0.83</td>\n",
              "      <td>4</td>\n",
              "      <td>274</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14996</th>\n",
              "      <td>0.72</td>\n",
              "      <td>0.72</td>\n",
              "      <td>4</td>\n",
              "      <td>175</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>technical</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14997</th>\n",
              "      <td>0.24</td>\n",
              "      <td>0.91</td>\n",
              "      <td>5</td>\n",
              "      <td>177</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14998</th>\n",
              "      <td>0.77</td>\n",
              "      <td>0.83</td>\n",
              "      <td>6</td>\n",
              "      <td>271</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>support</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>14999 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bb2925ef-788a-406a-aec7-a0001f552ac1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bb2925ef-788a-406a-aec7-a0001f552ac1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bb2925ef-788a-406a-aec7-a0001f552ac1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-602fd3ca-962e-41aa-966e-54c285f42de5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-602fd3ca-962e-41aa-966e-54c285f42de5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-602fd3ca-962e-41aa-966e-54c285f42de5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_880aa740-0441-4905-b66b-4c952080da1b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_880aa740-0441-4905-b66b-4c952080da1b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 14999,\n  \"fields\": [\n    {\n      \"column\": \"satisfactoryLevel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24863065106114257,\n        \"min\": 0.09,\n        \"max\": 1.0,\n        \"num_unique_values\": 92,\n        \"samples\": [\n          0.61,\n          0.39,\n          0.15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lastEvaluation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17116911062327533,\n        \"min\": 0.36,\n        \"max\": 1.0,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          0.66,\n          0.39,\n          0.53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numberOfProjects\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgMonthlyHours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 96,\n        \"max\": 310,\n        \"num_unique_values\": 215,\n        \"samples\": [\n          102,\n          97,\n          196\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timeSpent.company\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 10,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6,\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workAccident\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"left\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"promotionInLast5years\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dept\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"management\",\n          \"accounting\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"low\",\n          \"medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "df = pd.read_csv('/content/PeopleCharmcase.csv')\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "sYTwHEdr_xlr",
        "outputId": "00164196-b138-4d66-dd75-ec4fff0145ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       satisfactoryLevel  lastEvaluation  numberOfProjects  avgMonthlyHours  \\\n",
              "count       14999.000000    14999.000000      14999.000000     14999.000000   \n",
              "mean            0.612834        0.716102          3.803054       201.050337   \n",
              "std             0.248631        0.171169          1.232592        49.943099   \n",
              "min             0.090000        0.360000          2.000000        96.000000   \n",
              "25%             0.440000        0.560000          3.000000       156.000000   \n",
              "50%             0.640000        0.720000          4.000000       200.000000   \n",
              "75%             0.820000        0.870000          5.000000       245.000000   \n",
              "max             1.000000        1.000000          7.000000       310.000000   \n",
              "\n",
              "       timeSpent.company  workAccident          left  promotionInLast5years  \n",
              "count       14999.000000  14999.000000  14999.000000           14999.000000  \n",
              "mean            3.498233      0.144610      0.238083               0.021268  \n",
              "std             1.460136      0.351719      0.425924               0.144281  \n",
              "min             2.000000      0.000000      0.000000               0.000000  \n",
              "25%             3.000000      0.000000      0.000000               0.000000  \n",
              "50%             3.000000      0.000000      0.000000               0.000000  \n",
              "75%             4.000000      0.000000      0.000000               0.000000  \n",
              "max            10.000000      1.000000      1.000000               1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b54c162d-4c4b-4d29-9c64-03f14ef849bf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>satisfactoryLevel</th>\n",
              "      <th>lastEvaluation</th>\n",
              "      <th>numberOfProjects</th>\n",
              "      <th>avgMonthlyHours</th>\n",
              "      <th>timeSpent.company</th>\n",
              "      <th>workAccident</th>\n",
              "      <th>left</th>\n",
              "      <th>promotionInLast5years</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.612834</td>\n",
              "      <td>0.716102</td>\n",
              "      <td>3.803054</td>\n",
              "      <td>201.050337</td>\n",
              "      <td>3.498233</td>\n",
              "      <td>0.144610</td>\n",
              "      <td>0.238083</td>\n",
              "      <td>0.021268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.248631</td>\n",
              "      <td>0.171169</td>\n",
              "      <td>1.232592</td>\n",
              "      <td>49.943099</td>\n",
              "      <td>1.460136</td>\n",
              "      <td>0.351719</td>\n",
              "      <td>0.425924</td>\n",
              "      <td>0.144281</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.090000</td>\n",
              "      <td>0.360000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>96.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.440000</td>\n",
              "      <td>0.560000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>156.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.640000</td>\n",
              "      <td>0.720000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.820000</td>\n",
              "      <td>0.870000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>245.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>310.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b54c162d-4c4b-4d29-9c64-03f14ef849bf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b54c162d-4c4b-4d29-9c64-03f14ef849bf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b54c162d-4c4b-4d29-9c64-03f14ef849bf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6dcf405c-b0ff-475a-b52c-89d49f8de8d2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6dcf405c-b0ff-475a-b52c-89d49f8de8d2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6dcf405c-b0ff-475a-b52c-89d49f8de8d2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"satisfactoryLevel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5302.752785300377,\n        \"min\": 0.09,\n        \"max\": 14999.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.6128335222348156,\n          0.64,\n          14999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lastEvaluation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5302.725216503965,\n        \"min\": 0.17116911062327533,\n        \"max\": 14999.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.7161017401160077,\n          0.72,\n          14999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numberOfProjects\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5301.632605184108,\n        \"min\": 1.2325923553183522,\n        \"max\": 14999.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.80305353690246,\n          4.0,\n          14999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgMonthlyHours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5240.043131004932,\n        \"min\": 49.94309937128408,\n        \"max\": 14999.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          201.0503366891126,\n          200.0,\n          14999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timeSpent.company\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5301.586356319515,\n        \"min\": 1.4601362305354812,\n        \"max\": 14999.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          14999.0,\n          3.498233215547703,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workAccident\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5302.871740631288,\n        \"min\": 0.0,\n        \"max\": 14999.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1446096406427095,\n          1.0,\n          0.35171855238017985\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"left\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5302.863271830312,\n        \"min\": 0.0,\n        \"max\": 14999.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.2380825388359224,\n          1.0,\n          0.4259240993802994\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"promotionInLast5years\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5302.88844750851,\n        \"min\": 0.0,\n        \"max\": 14999.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.021268084538969265,\n          1.0,\n          0.14428146457858232\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "TRlKjyNeAL-K",
        "outputId": "5bdaab12-8884-47f3-f72a-fc6df8ff8af9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   satisfactoryLevel  lastEvaluation  numberOfProjects  avgMonthlyHours  \\\n",
              "0               0.38            0.53                 2              157   \n",
              "1               0.80            0.86                 5              262   \n",
              "2               0.11            0.88                 7              272   \n",
              "3               0.37            0.52                 2              159   \n",
              "4               0.41            0.50                 2              153   \n",
              "\n",
              "   timeSpent.company  workAccident  left  promotionInLast5years   dept  salary  \n",
              "0                  3             0     1                      0  sales     low  \n",
              "1                  6             0     1                      0  sales  medium  \n",
              "2                  4             0     1                      0  sales  medium  \n",
              "3                  3             0     1                      0  sales     low  \n",
              "4                  3             0     1                      0  sales     low  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2f3b1a9-69a5-4d8e-9c46-11e6f02d91c1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>satisfactoryLevel</th>\n",
              "      <th>lastEvaluation</th>\n",
              "      <th>numberOfProjects</th>\n",
              "      <th>avgMonthlyHours</th>\n",
              "      <th>timeSpent.company</th>\n",
              "      <th>workAccident</th>\n",
              "      <th>left</th>\n",
              "      <th>promotionInLast5years</th>\n",
              "      <th>dept</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.38</td>\n",
              "      <td>0.53</td>\n",
              "      <td>2</td>\n",
              "      <td>157</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.80</td>\n",
              "      <td>0.86</td>\n",
              "      <td>5</td>\n",
              "      <td>262</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.11</td>\n",
              "      <td>0.88</td>\n",
              "      <td>7</td>\n",
              "      <td>272</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.37</td>\n",
              "      <td>0.52</td>\n",
              "      <td>2</td>\n",
              "      <td>159</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.41</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2</td>\n",
              "      <td>153</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2f3b1a9-69a5-4d8e-9c46-11e6f02d91c1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e2f3b1a9-69a5-4d8e-9c46-11e6f02d91c1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e2f3b1a9-69a5-4d8e-9c46-11e6f02d91c1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1823565a-05bf-4656-8f3e-b31cdec34d82\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1823565a-05bf-4656-8f3e-b31cdec34d82')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1823565a-05bf-4656-8f3e-b31cdec34d82 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 14999,\n  \"fields\": [\n    {\n      \"column\": \"satisfactoryLevel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24863065106114257,\n        \"min\": 0.09,\n        \"max\": 1.0,\n        \"num_unique_values\": 92,\n        \"samples\": [\n          0.61,\n          0.39,\n          0.15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lastEvaluation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17116911062327533,\n        \"min\": 0.36,\n        \"max\": 1.0,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          0.66,\n          0.39,\n          0.53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numberOfProjects\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgMonthlyHours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 96,\n        \"max\": 310,\n        \"num_unique_values\": 215,\n        \"samples\": [\n          102,\n          97,\n          196\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timeSpent.company\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 10,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6,\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workAccident\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"left\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"promotionInLast5years\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dept\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"management\",\n          \"accounting\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"low\",\n          \"medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(df.isnull(),yticklabels=False, cbar=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 593
        },
        "id": "6r4vgGndhAWR",
        "outputId": "e0d1b112-d43f-4018-ed1a-1f9e33d0eb9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "df['satisfactoryLevel'].plot(kind='hist', bins=20, title='satisfactoryLevel')\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ],
      "cell_type": "code",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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3WcWAabjxifcALhBYWGhMWrUKKNly5aGv7+/UaNGDaNly5bG66+/buuze/duIzo62qhZs6ZRt25dY/Dgwca3335rSDIWLFhg61dSUmI88cQTRr169QyLxWL3OLt+9dj91ZzTMC7/2P2mTZuMO++806hWrZoRHh5ujB492vj0008NScb69evt+m7cuNG47777bOdp0aKF3SPpV6r57NmzxsiRI43w8HCjatWqxq233mpMnTrV7rH9i9f2ex8hMGzYMEOS8d5775Xbd/Gx+8tt77zzjmEYhlFUVGRMmTLFaNq0qeHr62vUqlXLaNOmjfH8888beXl55cZt3769Icn4+9//ftm63njjDaNNmzZGtWrVDH9/f6N58+bG6NGjjePHj9v68Ng9zMhiGL/53ywAwDUbOXKk3nrrLWVlZal69eruLgfA72ANEQA4WUFBgd5991316dOHMARcJ1hDBABOkpOTozVr1ujDDz/Uzz//rOHDh7u7JABXiUAEAE6ye/duxcbGKjg4WLNmzVKrVq3cXRKAq8QaIgAAYHqsIQIAAKZHIAIAAKZHILoKhmHIarWW+yA4AABwYyAQXYWzZ88qMDBQZ8+edXcpAADABQhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9LzdXQAAwDwajP3EJeMentzDJePCPNw6Q7Rhwwb17NlT4eHhslgsWr58uW1fcXGxxowZo+bNm6tGjRoKDw/XgAEDdPz4cbsxcnNzFRsbq4CAAAUFBSk+Pl7nzp2z6/Pdd9+pY8eO8vPzU0REhFJSUirj8gAAwHXCrYEoPz9fLVu21Jw5c8rtO3/+vLZv367nnntO27dv19KlS7Vv3z498MADdv1iY2OVkZGhtLQ0rVixQhs2bNCQIUNs+61Wq7p27ar69etr27Ztmjp1qiZOnKg33njD5dcHAACuDxbDMAx3FyFJFotFy5YtU+/evS/bZ+vWrbrjjjt05MgR3XzzzdqzZ4+aNGmirVu3qm3btpKk1atXq3v37vrpp58UHh6uuXPn6plnnlFWVpZ8fHwkSWPHjtXy5cu1d+/eq6rNarUqMDBQeXl5CggIuOZrBQCz4i0zeKrralF1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AACmRyACAACmRyACAACmRyACAACmRyACAACmRyACAACmRyACAACmRyACAACmRyACAACmRyACAACmRyACAACmx3eZAQCue6767i6YBzNEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9AhEAADA9PhgRgAA3IAPk/QszBABAADTIxABAADTIxABAADTIxABAADTIxABAADT4ykzAABwVVz5ZNzhyT1cNvbVYIYIAACYHoEIAACYHoEIAACYHoEIAACYHoEIAACYHoEIAACYHoEIAACYHoEIAACYHh/MCHgwV34IGnA5/L2DGXn0DFFpaamee+45RUZGqlq1amrYsKEmTZokwzBsfQzD0Pjx4xUWFqZq1aopOjpaBw4csBsnNzdXsbGxCggIUFBQkOLj43Xu3LnKvhwAAOChPDoQTZkyRXPnztVrr72mPXv2aMqUKUpJSdHs2bNtfVJSUjRr1izNmzdPmzdvVo0aNRQTE6OCggJbn9jYWGVkZCgtLU0rVqzQhg0bNGTIEHdcEgAA8EAe/ZbZV199pV69eqlHjwvfb9KgQQP9+9//1pYtWyRdmB2aMWOGnn32WfXq1UuS9PbbbyskJETLly9Xv379tGfPHq1evVpbt25V27ZtJUmzZ89W9+7dNW3aNIWHh7vn4gAAgMfw6Bmiu+66S2vXrtX+/fslSd9++602btyo+++/X5J06NAhZWVlKTo62nZMYGCg2rVrp/T0dElSenq6goKCbGFIkqKjo+Xl5aXNmzdf8ryFhYWyWq12GwAAuHF59AzR2LFjZbVa1ahRI1WpUkWlpaV66aWXFBsbK0nKysqSJIWEhNgdFxISYtuXlZWl4OBgu/3e3t6qXbu2rc9vJScn6/nnn3f25QAwIRYoA9cHj54h+uCDD5Samqr33ntP27dv16JFizRt2jQtWrTIpecdN26c8vLybNvRo0ddej4AAOBeHj1DNGrUKI0dO1b9+vWTJDVv3lxHjhxRcnKy4uLiFBoaKknKzs5WWFiY7bjs7Gy1atVKkhQaGqqcnBy7cUtKSpSbm2s7/rd8fX3l6+vrgisCAACeyKNniM6fPy8vL/sSq1SporKyMklSZGSkQkNDtXbtWtt+q9WqzZs3KyoqSpIUFRWlM2fOaNu2bbY+69atU1lZmdq1a1cJVwEAADydR88Q9ezZ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QBbDMAx3F3G1Tp48qeDgYH3xxRe6++67lZeXp3r16um9997Tww8/LEnau3evGjdurPT0dN15551atWqV/vznP+v48eMKCQmRJM2bN09jxozRyZMn5ePj87vntVqtCgwMVF5engICApx+Xa56qgr2XPmUGfcQAK6Nu58E9ugZot/Ky8uTJNWuXVuStG3bNhUXFys6OtrWp1GjRrr55puVnp4uSUpPT1fz5s1tYUiSYmJiZLValZGRccnzFBYWymq12m0AAODGdd0EorKyMo0YMULt27dXs2bNJElZWVny8fFRUFCQXd+QkBBlZWXZ+vw6DF3cf3HfpSQnJyswMNC2RUREOPlqAACAJ7luAlFCQoK+//57LV682OXnGjdunPLy8mzb0aNHXX5OAADgPtfFJ1UnJiZqxYoV2rBhg2666SZbe2hoqIqKinTmzBm7WaLs7GyFhoba+mzZssVuvItPoV3s81u+vr7y9fV18lUAAABP5dEzRIZhKDExUcuWLdO6desUGRlpt79NmzaqWrWq1q5da2vbt2+fMjMzFRUVJUmKiorSrl27lJOTY+uTlpamgIAANWnSpHIuBAAAeDSPniFKSEjQe++9p//+97/y9/e3rfkJDAxUtWrVFBgYqPj4eCUlJal27doKCAjQE088oaioKN15552SpK5du6pJkybq37+/UlJSlJWVpWeffVYJCQnMAgEAAEkeHojmzp0rSbrnnnvs2hcsWKCBAwdKkl599VV5eXmpT58+KiwsVExMjF5//XVb3ypVqmjFihX6xz/+oaioKNWoUUNxcXF64YUXKusyAACAh/PoQHQ1H5Hk5+enOXPmaM6cOZftU79+fa1cudKZpQEAgBuIR68hAgAAqAwEIgAAYHoEIgAAYHoevYYIcCa+bwwAcDnMEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMjEAEAANMzVSCaM2eOGjRoID8/P7Vr105btmxxd0kAAMADmCYQvf/++0pKStKECRO0fft2tWzZUjExMcrJyXF3aQAAwM1ME4imT5+uwYMHa9CgQWrSpInmzZun6tWra/78+e4uDQAAuJm3uwuoDEVFRdq2bZvGjRtna/Py8lJ0dLTS09PL9S8sLFRhYaHtdV5eniTJarW6pL6ywvMuGRcAgOuFq37HSpK/v78sFssV+5giEJ06dUqlpaUKCQmxaw8JCdHevXvL9U9OTtbzzz9frj0iIsJlNQIAYGaBM1w3dl5engICAq7YxxSBqKLGjRunpKQk2+uysjLl5uaqTp06v5swcYHValVERISOHj36u38J4XrcD8/BvfAc3AvP4ep74e/v/7t9TBGI6tatqypVqig7O9uuPTs7W6GhoeX6+/r6ytfX164tKCjIlSXesAICAviHxoNwPzwH98JzcC88hzvvhSkWVfv4+KhNmzZau3atra2srExr165VVFSUGysDAACewBQzRJKUlJSkuLg4tW3bVnfccYdmzJih/Px8DRo0yN2lAQAANzNNIOrbt69Onjyp8ePHKysrS61atdLq1avLLbSGc/j6+mrChAnl3nqEe3A/PAf3wnNwLzyHJ9wLi2EYhtvODgAA4AFMsYYIAADgSghEAADA9AhEAADA9AhEAADA9AhEAADA9AhEcNicOXPUoEED+fn5qV27dtqyZctl+7755pvq2LGjatWqpVq1aik6OvqK/VExFbkXv7Z48WJZLBb17t3btQWaTEXvx5kzZ5SQkKCwsDD5+vrqtttu08qVKyup2htbRe/FjBkzdPvtt6tatWqKiIjQyJEjVVBQUEnV3pg2bNignj17Kjw8XBaLRcuXL//dYz7//HO1bt1avr6+uuWWW7Rw4UKX1ykDcMDixYsNHx8fY/78+UZGRoYxePBgIygoyMjOzr5k/0cffdSYM2eOsWPHDmPPnj3GwIEDjcDAQOOnn36q5MpvPBW9FxcdOnTI+MMf/mB07NjR6NWrV+UUawIVvR+FhYVG27Ztje7duxsbN240Dh06ZHz++efGzp07K7nyG09F70Vqaqrh6+trpKamGocOHTI+/fRTIywszBg5cmQlV35jWblypfHMM88YS5cuNSQZy5Ytu2L/gwcPGtWrVzeSkpKM3bt3G7NnzzaqVKlirF692qV1EojgkDvuuMNISEiwvS4tLTXCw8ON5OTkqzq+pKTE8Pf3NxYtWuSqEk3DkXtRUlJi3HXXXcb//u//GnFxcQQiJ6ro/Zg7d67xxz/+0SgqKqqsEk2jovciISHBuPfee+3akpKSjPbt27u0TjO5mkA0evRoo2nTpnZtffv2NWJiYlxYmWHwlhkqrKioSNu2bVN0dLStzcvLS9HR0UpPT7+qMc6fP6/i4mLVrl3bVWWagqP34oUXXlBwcLDi4+Mro0zTcOR+fPTRR4qKilJCQoJCQkLUrFkzvfzyyyotLa2ssm9IjtyLu+66S9u2bbO9rXbw4EGtXLlS3bt3r5SacUF6errdfZOkmJiYq/794ijTfHUHnOfUqVMqLS0t97UnISEh2rt371WNMWbMGIWHh5f7S4+KceRebNy4UW+99ZZ27txZCRWaiyP34+DBg1q3bp1iY2O1cuVK/fDDDxo2bJiKi4s1YcKEyij7huTIvXj00Ud16tQpdejQQYZhqKSkRI8//rj++c9/VkbJ+P+ysrIued+sVqt++eUXVatWzSXnZYYIlW7y5MlavHixli1bJj8/P3eXYypnz55V//799eabb6pu3bruLgeSysrKFBwcrDfeeENt2rRR37599cwzz2jevHnuLs10Pv/8c7388st6/fXXtX37di1dulSffPKJJk2a5O7SUAmYIUKF1a1bV1WqVFF2drZde3Z2tkJDQ6947LRp0zR58mStWbNGLVq0cGWZplDRe/Hjjz/q8OHD6tmzp62trKxMkuTt7a19+/apYcOGri36BubIfxthYWGqWrWqqlSpYmtr3LixsrKyVFRUJB8fH5fWfKNy5F4899xz6t+/v/7+979Lkpo3b678/HwNGTJEzzzzjLy8mEOoDKGhoZe8bwEBAS6bHZKYIYIDfHx81KZNG61du9bWVlZWprVr1yoqKuqyx6WkpGjSpElavXq12rZtWxml3vAqei8aNWqkXbt2aefOnbbtgQceUOfOnbVz505FRERUZvk3HEf+22jfvr1++OEHWzCVpP379yssLIwwdA0cuRfnz58vF3ouBlWD70GvNFFRUXb3TZLS0tKu+PvFKVy6ZBs3rMWLFxu+vr7GwoULjd27dxtDhgwxgoKCjKysLMMwDKN///7G2LFjbf0nT55s+Pj4GB9++KFx4sQJ23b27Fl3XcINo6L34rd4ysy5Kno/MjMzDX9/fyMxMdHYt2+fsWLFCiM4ONh48cUX3XUJN4yK3osJEyYY/v7+xr///W/j4MGDxmeffWY0bNjQeOSRR9x1CTeEs2fPGjt27DB27NhhSDKmT59u7Nixwzhy5IhhGIYxduxYo3///rb+Fx+7HzVqlLFnzx5jzpw5PHYPzzZ79mzj5ptvNnx8fIw77rjD+Prrr237OnXqZMTFxdle169f35BUbpswYULlF34Dqsi9+C0CkfNV9H589dVXRrt27QxfX1/jj3/8o/HSSy8ZJSUllVz1jaki96K4uNiYOHGi0bBhQ8PPz8+IiIgwhg0bZpw+fbryC7+BrF+//pL//l/82cfFxRmdOnUqd0yrVq0MHx8f449//KOxYMECl9dpMQzmAQEAgLmxhggAAJgegQgAAJgegQgAAJgegQgAAJgegQgAAJgegQgAAJgegQgAAJgegQgAAJgegQgAAJgegQgAAJgegQgAAJje/wOtkp2Q6+YQFQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "0j0VzMGfAgXW",
        "outputId": "5cbd6b77-2b51-4e99-9551-060632bf3186"
      }
    },
    {
      "source": [
        "df.groupby('salary').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ],
      "cell_type": "code",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "wpxj1rlwAwgy",
        "outputId": "cfceee74-1311-49b8-acb4-4fb9241a757c"
      }
    },
    {
      "source": [
        "figsize = (12, 1.2 * len(df['salary'].unique()))\n",
        "plt.figure(figsize=figsize)\n",
        "sns.violinplot(df, x='numberOfProjects', y='salary', inner='box', palette='Dark2')\n",
        "sns.despine(top=True, right=True, bottom=True, left=True)"
      ],
      "cell_type": "code",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-142eab566c57>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.violinplot(df, x='numberOfProjects', y='salary', inner='box', palette='Dark2')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 464
        },
        "id": "X2M2J8pbBGOE",
        "outputId": "fcf222b0-fc96-4d5c-aae2-b9ed4e7f4f83"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['salary'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X7Kh8zU_f5A0",
        "outputId": "413bec1e-9a4b-48d5-edd6-10c394d48f3e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['low', 'medium', 'high'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.iloc[:,0:4]"
      ],
      "metadata": {
        "id": "-OsbssieERJT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y = df['salary']"
      ],
      "metadata": {
        "id": "_8W86nkAjNzK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=21) #30% test size 70:30"
      ],
      "metadata": {
        "id": "aEzwJoStjhGq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### SVM"
      ],
      "metadata": {
        "id": "oA1LozPwISic"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\n",
        "model = SVC(C=7,kernel='poly')\n",
        "model.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "6fhV230MkPI4",
        "outputId": "693f6b96-cc66-411f-cd52-c40bb9b7566b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=7, kernel='poly')"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=7, kernel=&#x27;poly&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(C=7, kernel=&#x27;poly&#x27;)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.score(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CCkXjnHvkrum",
        "outputId": "84b45774-9e5c-4057-b22c-b9aae8914fe8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4889037051147728"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.score(X_test,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lAXWgpzKmFxT",
        "outputId": "0c6259f4-91e1-4ca3-c605-2221f856a3c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4851111111111111"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report\n",
        "\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "pred = model.predict(X_test)\n",
        "matrix = classification_report(y_test, pred)\n",
        "print(matrix)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zJLLDTK9nQPP",
        "outputId": "9945ec49-2d98-4f04-e278-16d30716cb84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "        high       0.00      0.00      0.00       356\n",
            "         low       0.49      1.00      0.65      2183\n",
            "      medium       0.00      0.00      0.00      1961\n",
            "\n",
            "    accuracy                           0.49      4500\n",
            "   macro avg       0.16      0.33      0.22      4500\n",
            "weighted avg       0.24      0.49      0.32      4500\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "cm = confusion_matrix(y_test,pred)"
      ],
      "metadata": {
        "id": "R4DlWZnun0a-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sn\n",
        "from matplotlib import pyplot as plt\n",
        "plt.figure(figsize=(5,4))\n",
        "sn.heatmap(cm, annot=True, fmt=\"\")\n",
        "plt.xlabel('Predicted value')\n",
        "plt.xlabel('Actual value')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 405
        },
        "id": "3YDPRqGwob6s",
        "outputId": "a4b12fca-81c9-49e6-cbc6-496519b80ebe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 14.722222222222216, 'Actual value')"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### KNN"
      ],
      "metadata": {
        "id": "q9-zZ23SIZIF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=21)"
      ],
      "metadata": {
        "id": "VeJe3cQcbav0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.fit_transform(X_test)"
      ],
      "metadata": {
        "id": "Kj1wJ4SybzlE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "knn = KNeighborsClassifier(n_neighbors=3,p=2,metric='euclidean').fit(X_train_scaled,y_train)\n",
        "knn.predict(X_train_scaled)\n",
        "knn.score(X_train_scaled,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0xHUwEDub9uc",
        "outputId": "b39120ff-b3d3-4eb7-fd82-6a8832cf40bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.75456288024002"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "knn.predict(X_test_scaled)\n",
        "knn.score(X_test_scaled,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yn3vi2sfcepN",
        "outputId": "ff8ee8d3-a403-4e8c-d8e7-815e6df3e5f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.49966666666666665"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred = knn.predict(X_test_scaled)\n",
        "matrix = classification_report(y_test,pred)\n",
        "print(matrix)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kq83E0PIc5Vb",
        "outputId": "e9ebc849-307d-483a-e3a1-d554874962af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "        high       0.16      0.24      0.19       234\n",
            "         low       0.56      0.56      0.56      1460\n",
            "      medium       0.52      0.47      0.50      1306\n",
            "\n",
            "    accuracy                           0.50      3000\n",
            "   macro avg       0.41      0.42      0.42      3000\n",
            "weighted avg       0.51      0.50      0.51      3000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "cm = confusion_matrix(y_test,pred)"
      ],
      "metadata": {
        "id": "zR8hdGdIdfor"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sn\n",
        "from matplotlib import pyplot as plt\n",
        "plt.figure(figsize=(5,4))\n",
        "sn.heatmap(cm, annot=True, fmt=\"\")\n",
        "plt.xlabel('Predicted value')\n",
        "plt.xlabel('Actual value')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 405
        },
        "id": "tjLcyFu7eFbr",
        "outputId": "fbad5734-4831-4f96-e603-6623fdc56d6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 14.722222222222216, 'Actual value')"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Decision Tree"
      ],
      "metadata": {
        "id": "cDEItCCLJ-FX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "treemodel = DecisionTreeClassifier()\n",
        "\n",
        "parameter={\n",
        "    'criterion':['gini','entropy','log_loss'],\n",
        "    'splitter':['best','random'],\n",
        "    'max_depth':[1,2,3,4,5],\n",
        "    'max_features':['auto','sqrt','log2']\n",
        "}\n",
        "\n",
        "cv = GridSearchCV(treemodel, param_grid=parameter, scoring='accuracy')\n",
        "\n",
        "cv.fit(X_train, y_train)\n",
        "print(cv.best_params_)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AT-mse7b1IXK",
        "outputId": "164a3307-8147-4922-b37a-b6b7b0211d3e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'criterion': 'entropy', 'max_depth': 2, 'max_features': 'sqrt', 'splitter': 'random'}\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:425: FitFailedWarning: \n",
            "150 fits failed out of a total of 450.\n",
            "The score on these train-test partitions for these parameters will be set to nan.\n",
            "If these failures are not expected, you can try to debug them by setting error_score='raise'.\n",
            "\n",
            "Below are more details about the failures:\n",
            "--------------------------------------------------------------------------------\n",
            "150 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 729, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1145, in wrapper\n",
            "    estimator._validate_params()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 638, in _validate_params\n",
            "    validate_parameter_constraints(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py\", line 96, in validate_parameter_constraints\n",
            "    raise InvalidParameterError(\n",
            "sklearn.utils._param_validation.InvalidParameterError: The 'max_features' parameter of DecisionTreeClassifier must be an int in the range [1, inf), a float in the range (0.0, 1.0], a str among {'sqrt', 'log2'} or None. Got 'auto' instead.\n",
            "\n",
            "  warnings.warn(some_fits_failed_message, FitFailedWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:979: UserWarning: One or more of the test scores are non-finite: [       nan        nan 0.48804068 0.48787394 0.48804068 0.48737401\n",
            "        nan        nan 0.48345658 0.48754068 0.48470738 0.48804068\n",
            "        nan        nan 0.48162279 0.48820776 0.47728977 0.48712401\n",
            "        nan        nan 0.48554144 0.48545748 0.48695731 0.47945498\n",
            "        nan        nan 0.48187443 0.48545696 0.4845412  0.48162391\n",
            "        nan        nan 0.48804068 0.48804068 0.48804068 0.48804068\n",
            "        nan        nan 0.48804057 0.49004165 0.48779057 0.48737401\n",
            "        nan        nan 0.48829057 0.48662404 0.4795396  0.48904095\n",
            "        nan        nan 0.48362415 0.4837055  0.47787418 0.48729068\n",
            "        nan        nan 0.48845818 0.48662474 0.48678967 0.48179029\n",
            "        nan        nan 0.48804068 0.48804068 0.48804068 0.48804068\n",
            "        nan        nan 0.48812401 0.48595665 0.48620724 0.48779068\n",
            "        nan        nan 0.4809562  0.48537328 0.48153984 0.48812404\n",
            "        nan        nan 0.48003946 0.48720713 0.48595779 0.48495759\n",
            "        nan        nan 0.48387297 0.48962384 0.47437286 0.48670602]\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = cv.predict(X_test)"
      ],
      "metadata": {
        "id": "aC1PAW2p0I59"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "score = accuracy_score(y_pred,y_test)\n",
        "score"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QD420n8u0twM",
        "outputId": "b52e1459-653c-4771-8d8c-aa72eb26770f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4866666666666667"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "matrix = classification_report(y_test,y_pred)"
      ],
      "metadata": {
        "id": "m7W8HDTu0TYV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "07bdcc21-b535-4967-ea49-803b01621b00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "cm = confusion_matrix(y_test,y_pred)\n",
        "\n",
        "import seaborn as sn\n",
        "from matplotlib import pyplot as plt\n",
        "plt.figure(figsize = (5,4))\n",
        "sn.heatmap(cm, annot=True)\n",
        "plt.xlabel('Predicted value')\n",
        "plt.ylabel('Actual Value')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 405
        },
        "id": "Gbtt7db51CeC",
        "outputId": "5eb04713-9e81-462f-ea59-d98ee0c5359d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(33.22222222222222, 0.5, 'Actual Value')"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
